version: 2.1

references:
  images:
    go: &GOLANG_IMAGE cimg/go:1.14
    python: &PYTHON_IMAGE circleci/python:2.7-stretch
    ci_machine: &CI_MACHINE_IMAGE ubuntu-1604:202004-01

  paths:
    test-results: &TEST_RESULTS_DIR bin

  environment: &ENVIRONMENT
    TEST_RESULTS_DIR: *TEST_RESULTS_DIR
    BUILD_IMAGE: *GOLANG_IMAGE

  filters-checks: &FILTERS_CHECK
    branches:
      only:
        - master
        - /^release-.*/
        - /^pull\/.*$/
        - /^feature.*/
        - /^fix.*/

  filters-release: &FILTERS_RELEASE
    branches:
      only:
        - /^release-.*/

executors:
  jams-test-executor:
    machine:
      image: *CI_MACHINE_IMAGE
    working_directory: ~/workspace

  jams-executor:
    docker:
      - image: *GOLANG_IMAGE
        user: root
    working_directory: ~/workspace

  delivery-executor:
    docker:
      - image: *PYTHON_IMAGE
        user: root
    working_directory: /workspace

jobs:
  unit_test:
    executor: jams-test-executor
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - run:
          name: Running test
          command: |
            mkdir -p $TEST_RESULTS_DIR
            docker-compose -f docker-compose-ci.yml run server

      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR
      - run:
          name: codecov upload
          when: always
          command: bash <(curl -s https://codecov.io/bash)

  lint:
    executor: jams-test-executor
    steps:
      - checkout
      - run:
          name: Install golangci-lint
          command: |
            download=https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
            wget -O- -q $download |sudo sh -s -- -b /go/bin/ v1.24.0
      - run:
          name: lint
          command: |
            /go/bin/golangci-lint run --no-config --issues-exit-code=1 --deadline=10m -v

  build:
    executor: jams-executor
    branches:
    steps:
      - checkout
      - run:
          name: Running build
          command: |
            make build-linux
      - persist_to_workspace:
          root: .
          paths:
            - .
      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR

  delivery:
    executor: jams-test-executor
    environment:
      <<: *ENVIRONMENT

    parameters:
      api-key:
        default: HEROKU_API_KEY
        description: The name of the environment variable containing your Heroku API Key.
        type: env_var_name
      app-name:
        default: HEROKU_APP_NAME
        description: >-
          The name of your Heroku App. For backwards compatibility the literal value
          `$HEROKU_APP_NAME` is the default, so you can easily use this command by
          setting an environment variable called HEROKU_APP_NAME
        type: env_var_name
      no_output_timeout:
        default: 10m
        description: >-
          Allows you to specify the no_output_timeout for the `git push` to heroku.
          Defaults to 10m.
        type: string
      process-types:
        default: ''
        description: Process types.
        type: string
      recursive:
        default: false
        description: Push all Dockerfiles in the directory to Heroku.
        type: boolean

    steps:
      - checkout
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Creating docker image
          command: |
            . ./helper-ci.sh
            make pack
      - run:
          name: Pushing docker image to registry
          command: |
            . ./helper-ci.sh
            make publish
      - run:
          name: Deploy docker image
          command: |
            . ./helper-ci.sh
            make deploy

  release:
    environment:
      <<: *ENVIRONMENT
    executor: delivery-executor
    steps:
      - checkout
      - run:
          name: Releasing
          command: |
            . ./helper-ci.sh
            make release

orbs:
  heroku: circleci/heroku@1.2.2

workflows:
  build-for-requests:
    jobs:
      - lint:
          filters:
            <<: *FILTERS_CHECK
      - unit_test:
          filters:
            <<: *FILTERS_CHECK
      - build:
          filters:
            <<: *FILTERS_CHECK
          requires:
            - unit_test
            - lint

  release:
    jobs:
      - lint:
          filters:
            <<: *FILTERS_RELEASE
      - unit_test:
          filters:
            <<: *FILTERS_RELEASE
      - build:
          filters:
            <<: *FILTERS_RELEASE
          requires:
            - unit_test
            - lint
      - delivery:
          filters:
            <<: *FILTERS_RELEASE
          requires:
            - build
      - release:
          filters:
            <<: *FILTERS_RELEASE
          requires:
            - delivery
